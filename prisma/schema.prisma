generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id                  Int           @unique @default(autoincrement()) @map("BusinessID")
  owner               User          @relation(fields: [userId], references: [id])
  //locations           Location[]    @relation("Locations")
  primaryLocation     Location?     @relation("PrimaryLocation")
  name                String        @unique
  sustainabilityScore Float         @map("FutureproofRating")
  customerScore       Float         @map("UserRating")
  ProfileText         String?
  comments            Comment[]
  reviews             UserReview[]
  createdAt           DateTime
  updatedAt           DateTime
  ProfilePicture      Bytes?
  type                BusinessType? @map("BusinessType")


  userId     Int
  locationId Int? @unique
  @@id([id, name])
}

model Comment {
  id        Int       @id @default(autoincrement())
  location  Location  @relation(fields: [locationId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  text      String    @map("CommentText")
  createdAt DateTime  @map("DateCreated") @db.Date
  business  Business? @relation(fields: [businessId, businessName], references: [id, name])

  businessId   Int?
  businessName String?
  locationId   Int
  userId       Int
}

model Location {
  id        Int       @id @default(autoincrement()) @map("LocationID")
  address   String    @map("Location")
  longitude Float?    @map("Longitude")
  latitude  Float?    @map("Latitude")
  Business  Business? @relation(name: "PrimaryLocation", fields: [businessId, businessName], references: [id, name])
  //BusinessList Business  @relation(name: "Locations", fields: [businessesID], references: [id])
  createdAt DateTime
  updatedAt DateTime
  Comment   Comment[]


  // businessesID   Int?
  // businessesName String?
  businessId     Int?
  businessName   String?

}

model User {
  id           Int          @id @default(autoincrement()) @map("UserID")
  firstName    String       @map("FirstName")
  lastName     String       @map("LastName")
  email        String       @map("Email")
  password     String
  profilePhoto Bytes?       @map("ProfilePic")
  roles        user_types?  @map("AccountType")
  Business     Business[]
  Comment      Comment[]
  UserReview   UserReview[]
}

model UserReview {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  Business   Business? @relation(fields: [businessId, businessName], references: [id, name])
  createdAt  DateTime  @map("DateCreated") @db.Date
  reputation Int
  ReviewData String


  businessId   Int?
  businessName String?
  userId       Int
}

enum BusinessType {
  RESTAURANT
  BAR
  CAFE
  OTHER
}

enum user_types {
  ADMIN
  CUSTOMER
  BUSINESS
}
